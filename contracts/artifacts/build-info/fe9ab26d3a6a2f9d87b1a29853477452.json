{
	"id": "fe9ab26d3a6a2f9d87b1a29853477452",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.25",
	"solcLongVersion": "0.8.25+commit.b61c2a91",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/GiftShop.sol": {
				"content": "// // SPDX-License-Identifier: MIT\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n// import \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n// contract GiftShop is Ownable {\r\n//     uint public count = 1;\r\n//     IERC721 public nftContract;\r\n//     address public registrar;\r\n\r\n//     struct Product {\r\n//         uint product_Id;\r\n//         string product_Title;\r\n//         uint price;\r\n//         string disc;\r\n//         string category;\r\n//         address buyer;\r\n//         uint nftId;\r\n//     }\r\n\r\n//     Product[] public products;\r\n\r\n//     event CreateProduct(string product_title, uint product_Id);\r\n//     event BuyProduct(uint product_Id, address buyer);\r\n//     event UpdateProductPrice(uint product_Id, uint newPrice);\r\n\r\n//     constructor(address _nftContract, address _registrar, address initialOwner) Ownable(initialOwner) {\r\n//         nftContract = IERC721(_nftContract);\r\n//         registrar = _registrar;\r\n//     }\r\n\r\n//     modifier onlyRegistrar() {\r\n//         require(msg.sender == registrar, \"Only the registrar can register products\");\r\n//         _;\r\n//     }\r\n\r\n//     function registerProduct(\r\n//         string memory _productTitle,\r\n//         string memory _disc,\r\n//         string memory _category,\r\n//         uint _price,\r\n//         uint _nftId\r\n//     ) public onlyRegistrar {\r\n//         require(_price > 0, \"Price must be above zero\");\r\n        \r\n//         Product memory tempProduct = Product({\r\n//             product_Id: count,\r\n//             product_Title: _productTitle,\r\n//             price: _price,\r\n//             disc: _disc,\r\n//             category: _category,\r\n//             buyer: address(0),\r\n//             nftId: _nftId\r\n//         });\r\n\r\n//         products.push(tempProduct);\r\n//         emit CreateProduct(_productTitle, tempProduct.product_Id);\r\n//         count++;\r\n//     }\r\n\r\n//     function buyProduct(uint _productId) public {\r\n//         require(_productId > 0 && _productId < count, \"Invalid product ID\");\r\n//         Product storage product = products[_productId - 1];\r\n//         require(product.buyer == address(0), \"Product already sold\");\r\n//         require(nftContract.ownerOf(product.nftId) == msg.sender, \"You do not own the required NFT\");\r\n\r\n//         product.buyer = msg.sender;\r\n\r\n//         emit BuyProduct(_productId, msg.sender);\r\n//     }\r\n\r\n//     function updateProductPrice(uint _productId, uint _newPrice) public onlyRegistrar {\r\n//         require(_productId > 0 && _productId < count, \"Invalid product ID\");\r\n//         require(_newPrice > 0, \"Price must be above zero\");\r\n        \r\n//         Product storage product = products[_productId - 1];\r\n//         product.price = _newPrice;\r\n\r\n//         emit UpdateProductPrice(_productId, _newPrice);\r\n//     }\r\n\r\n//     function getProduct(uint _productId) public view returns (Product memory) {\r\n//         require(_productId > 0 && _productId < count, \"Invalid product ID\");\r\n//         return products[_productId - 1];\r\n//     }\r\n// }\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"errors": [
			{
				"component": "general",
				"errorCode": "3420",
				"formattedMessage": "Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.25;\"\n--> contracts/GiftShop.sol\n\n",
				"message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.25;\"",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/GiftShop.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/GiftShop.sol": {
				"ast": {
					"absolutePath": "contracts/GiftShop.sol",
					"exportedSymbols": {},
					"id": 1,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [],
					"src": "3035:0:0"
				},
				"id": 0
			}
		}
	}
}